# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Gw9qG1YEC5oc4IJEg5s2QSGYNNBKOE6l
"""

!pip install flask-ngrok

!pip install flask-ngrok

import os

os.makedirs('/content/templates', exist_ok=True)

with open('/content/templates/form.html', 'w') as f:
    f.write("""
    <!DOCTYPE html>
    <html>
    <head><title>Form</title></head>
    <body>
        <h2>Enter something</h2>
        <form method="POST">
            <input type="text" name="input" />
            <button type="submit">Submit</button>
        </form>
    </body>
    </html>
    """)

!pip install pyngrok

from pyngrok import ngrok

from flask import Flask, render_template, request
from pyngrok import ngrok, conf
import numpy as np
import joblib

conf.get_default().auth_token = "309QUeFfVUcyRJAqb8I86BTIgR4_6NEHWbB7zVa4gT3K56Ww6"

app = Flask(__name__, template_folder='/content/templates')
model = joblib.load("final_model.pkl")

@app.route('/', methods=['GET', 'POST'])
def form():
    if request.method == 'POST':
        user_input = request.form['input']
        return f"You entered: {user_input}"
    return render_template('form.html')

def home():
    return render_template('form.html')

@app.route('/predict', methods=['POST'])
def predict():
    feature1 = float(request.form['feature1'])
    feature2 = float(request.form['feature2'])
    input_data = np.array([[feature1, feature2]])
    prediction = model.predict(input_data)
    return render_template('form.html', prediction_text=f"Estimated Salary: ${prediction[0]:,.2f}")


public_url = ngrok.connect(5000)
print("Public URL:", public_url)

app.run()

from flask import Flask, request, render_template_string
from pyngrok import ngrok

app = Flask(__name__)

html_form = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Salary Predictor</title>
    <!-- Bootstrap CDN -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body class="bg-light">
    <div class="container mt-5">
        <div class="row justify-content-center">
            <div class="col-md-6 col-sm-10">
                <div class="card shadow-lg">
                    <div class="card-body">
                        <h3 class="card-title text-center mb-4">ðŸ’¼ Salary Predictor</h3>
                        <form method="POST" action="/predict">
                            <div class="mb-3">
                                <label for="feature1" class="form-label">Years of Experience</label>
                                <input type="number" class="form-control" id="feature1" name="feature1" step="any" required>
                            </div>
                            <div class="mb-3">
                                <label for="feature2" class="form-label">Skill Score</label>
                                <input type="number" class="form-control" id="feature2" name="feature2" step="any" required>
                            </div>
                            <div class="d-grid">
                                <button type="submit" class="btn btn-primary">Predict</button>
                            </div>
                        </form>
                        {% if prediction_text %}
                            <div class="alert alert-info text-center mt-4" role="alert">
                                {{ prediction_text }}
                            </div>
                        {% endif %}
                    </div>
                </div>
            </div>
        </div>
    </div>
</body>
</html>
"""

@app.route('/', methods=['GET'])
def home():
    return render_template_string(html_form)

@app.route('/predict', methods=['POST'])
def predict():
    try:
        feature1 = request.form['feature1'].strip()
        feature2 = request.form['feature2'].strip()

        if not feature1 or not feature2:
            return render_template_string(html_form, prediction_text="Please fill out both fields.")

        f1 = float(feature1)
        f2 = float(feature2)

        if f1 < 0 or f2 < 0:
            return render_template_string(html_form, prediction_text="Negative values not allowed.")

        result = f1 * 1000 + f2 * 2000
        return render_template_string(html_form, prediction_text=f'Predicted Salary: â‚¹{result:,.2f}')

    except ValueError:
        return render_template_string(html_form, prediction_text="Enter valid numbers.")



public_url = ngrok.connect(5000)
print(" * Ngrok URL:", public_url)

app.run(port=5000)